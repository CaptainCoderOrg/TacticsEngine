@using System.Diagnostics.CodeAnalysis;
@using CaptainCoder.TacticsEngine.Board
@using CaptainCoder.TacticsEngine.Board
@using WebEditor.Components.Board
@using WebEditor.Components.DragAndDrop
<div class="figure-panel">
    <h2>Figures</h2>
    <div class="figure-selection">
        
        @foreach (Figure figure in _figures)
        {
            
            <Draggable CreateDragData="@(args => CreateData(args, figure))">
                <FigureRenderer Figure="@figure"/>
            </Draggable>
        }
</div>

<div class="figure-creator">
    <h2>Enter sizes to create a new figure</h2>
    <div style="color: red" hidden="@_Error">
        <h4>Unable to create Figure, Only Positive integers may be inputted</h4>
    </div>
    <p>Width:</p>
    <input type="number" placeholder="Width" @bind="@NewWidth" />
    <p>Height:</p>
    <input type="number" placeholder="Width" @bind="@NewHeight" />
    <button @onclick="@(AddNewFigure)">Add!</button>
</div>
@code
{
    static int NewHeight { get; set; } = 0;
    static int NewWidth { get; set; } = 0;


    [CascadingParameter, EditorRequired] public required BoardData CurrentBoard { get; set; }

    private List<Figure> _figures =
    [
        new Figure(1, 1),
        new Figure(2, 2),
        new Figure(1, 2),
        new Figure(2, 1),
        new Figure(3, 2),
        new Figure(3, 3),
    ];


    private IDragData CreateData(DragEventArgs args, Figure figure)
    {
        int offX = (int)(-args.OffsetX / 25);
        int offY = (int)(-args.OffsetY / 25);
        return new FigureDragData(figure, new Position(offX, offY));
    }
    
    private bool _Error { get; set; } = true;
    
    private void AddNewFigure()
    {

        if (NewWidth < 1 || NewHeight < 1)
        {
            _Error = false;
        }
        else
        {
            _figures.Add(new Figure(NewWidth, NewHeight));
            _Error = true;
        }

        
    }
}

</div>
