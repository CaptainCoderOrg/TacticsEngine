@inject DragAndDropManager DragAndDropManager
<div class="dropzone-element"
     ondragover="event.preventDefault();"
     @ondragenter="@CheckDragEnter"
     @ondrop:preventDefault
     @ondrop="@CheckDrop">
    @ChildContent
</div>

@code
{
    [Parameter, EditorRequired]
    public required RenderFragment ChildContent { get; set; }
    [Parameter, EditorRequired]
    public required EventCallback<IDragData> OnEnter { get; set; }
    [Parameter, EditorRequired]
    public required EventCallback<IDragData> OnDrop { get; set; }

    private async Task CheckDrop(DragEventArgs args)
    {
        if (DragAndDropManager.DraggedData is IDragData data)
        {
            // We need to wait for the JS event to finish firing before we trigger our own
            await Task.Delay(1);
            await OnDrop.InvokeAsync(data);
        }
    }

    private async Task CheckDragEnter(DragEventArgs args)
    {
        if (DragAndDropManager.DraggedData is IDragData data)
        {
            // We need to wait for the JS event to finish firing before we trigger our own
            await Task.Delay(1);
            await OnEnter.InvokeAsync(data);
        }
    }
}