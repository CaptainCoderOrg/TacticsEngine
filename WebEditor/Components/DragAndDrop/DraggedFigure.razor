@inject DragAndDropManager DragAndDropManager
@implements IDisposable
@if (DragAndDropManager.DraggedData is not null && DragAndDropManager.DraggedFigure is Positioned<Figure> target)
{
    <ElementRenderer Position="@target.Position"
                     Width="@target.Element.Width"
                     Height="@target.Element.Height"
                     IsDragging
                     IsValid="@DragAndDropManager.DraggedData.CanDrop(CurrentBoard, target.Position)">
        <FigureRenderer Figure="@target.Element" />
    </ElementRenderer>
}

@code
{
    [CascadingParameter, AllowNull]
    public required BoardData CurrentBoard { get; set; }

    protected override void OnInitialized()
    {
        DragAndDropManager.OnDraggedFigureChange += CheckSelected;
    }

    public void Dispose()
    {
        DragAndDropManager.OnDraggedFigureChange -= CheckSelected;
    }

    private void CheckSelected(Positioned<Figure>? _)
    {
        StateHasChanged();
    }
}