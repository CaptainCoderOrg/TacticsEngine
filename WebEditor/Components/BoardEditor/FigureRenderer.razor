@using CaptainCoder.TacticsEngine.Board
@using System.Diagnostics.CodeAnalysis
@inject ToolManager ToolManager
@if (IsDragging || Board.Figures.Contains(Figure))
{
<div 
    class="figure-info @Dragged @ValidPosition @IgnoreMouse"
    style="
        --pos-x: @(Figure.Position.X); 
        --pos-y: @(Figure.Position.Y);
        --figure-width: @(Figure.Element.Width);
        --figure-height: @(Figure.Element.Height);"
    @onmouseenter="@(() => OnMouseEnter.InvokeAsync(Figure.Position))"
    @onclick="@(() => ToolManager.SelectFigure(Board, Figure))"
    @onmousedown="@(() => _mouseDown = true)"
    @onmouseup="@(() => _mouseDown = false)"
    @onmousemove="@CheckDragStart"
    >
</div>
}

@code
{
    private string IgnoreMouse => FigureTool.Shared.IsDragging ? "ignore-mouse" : ""; 
    private string Dragged => IsDragging ? "dragged" : "";
    private string ValidPosition => IsDragging ? IsValidPosition ? "valid-position" : "invalid-position" : "";
    private bool _mouseDown = false;
    [Parameter, EditorRequired, AllowNull]
    public Positioned<Figure> Figure { get; set; }
    [CascadingParameter, AllowNull]
    public Board Board { get; set; }
    [Parameter]
    public EventCallback<Position> OnMouseEnter { get; set; }
    [Parameter]
    public bool IsDragging { get; set; } = false;
    public bool IsValidPosition => Board.CanAddFigure(Figure.Position, Figure.Element);

    private void CheckDragStart(MouseEventArgs args)
    {
        if (_mouseDown)
        {
            _mouseDown = false;
            ToolManager.StartDragFigure(Board, Figure);
        }
    }

}