@using System.Text.Json
@using Blazor.DownloadFileFast.Interfaces
@using System.Diagnostics.CodeAnalysis
@using System.Text
@inject IJSRuntime JSRuntime
@inject IBlazorDownloadFileService BlazorDownloadFileService
<div @ref="_editorContent" tabindex="0" class="editor-content" @onkeypress="HandleKeyboard">
    <div class="editor-menu">
        <h1>Board Editor</h1>
        <button @onclick="@(() => LoadBoard())">Load File</button>
        <InputFile @ref="@_inputFile" OnChange="@OnFileSelected" hidden />
        <button @onclick="@(() => SaveBoard())">Save File</button>
        <button @onclick="@(() => Undo())">Undo</button>
        <button @onclick="@(() => Redo())">Redo</button>
        <span>
            W: <InputNumber @bind-Value="_width" /> H: <InputNumber @bind-Value="_height" />
        </span>

        <span>
            Zoom:
            <InputSelect @bind-Value="_zoom">
                <option value="0.25">25%</option>
                <option value="0.5">50%</option>
                <option value="0.75">75%</option>
                <option checked value="1">100%</option>
                <option value="1.25">125%</option>
                <option value="1.5">150%</option>
                <option value="2">200%</option>
            </InputSelect>
        </span>
    </div>
    <div class="board-panel">
        <CascadingValue Value="this">
            <BoardRenderer Board="@Board" Zoom="@_zoom" Width="@_width" Height="@_height" />
        </CascadingValue>
    </div>
    <div class="panels-content">
        <CascadingValue Value="@Board">
            <InspectorPanel />
            <FigurePanel />
        </CascadingValue>
    </div>
</div>

@code
{
    private ElementReference _editorContent;
    private readonly Stack<IBoardEditCommand> _undoStack = new();
    private readonly Stack<IBoardEditCommand> _redoStack = new();
    private int _height = 20;
    private int _width = 20;
    private float _zoom = 1;
    [AllowNull]
    public BoardData Board { get; private set; } = new();
    [AllowNull]
    private InputFile _inputFile;
    public async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        const int MaxSize = 100 * 1024 * 1024; // 100 MB
                                               // TODO: This reads the entire string then parses it. probably a better way?
        string? reader =
            await new StreamReader(e.File.OpenReadStream(MaxSize)).ReadToEndAsync();
        if (!BoardExtensions.TryFromJson(reader, out BoardData? result))
        {
            // TODO: Error handling
            Console.WriteLine("Error");
            return;
        }
        Board = result;
    }

    private async Task LoadBoard()
    {
        await JSRuntime.InvokeVoidAsync("HTMLElement.prototype.click.call", _inputFile.Element);
    }

    private async Task SaveBoard()
    {
        var bytes = Encoding.UTF8.GetBytes(Board.ToJson());
        await BlazorDownloadFileService.DownloadFileAsync("Board.json", bytes, "application/json");
    }

    protected override void OnInitialized()
    {
        Board = new();
    }

    public void Apply(IBoardEditCommand command)
    {
        _undoStack.Push(command);
        _redoStack.Clear();
        Board = command.Do();
        StateHasChanged();
    }

    public void Undo()
    {
        if (_undoStack.TryPop(out IBoardEditCommand? command))
        {
            Board = command.Undo();
            _redoStack.Push(command);
        }
    }

    public void Redo()
    {
        if (_redoStack.TryPop(out IBoardEditCommand? command))
        {
            Board = command.Do();
            _undoStack.Push(command);
        }
    }

    public void HandleKeyboard(KeyboardEventArgs args)
    {  
        if (args.CtrlKey && args.ShiftKey && args.ToKeyCode() is KeyCode.KeyZ)
        {
            Redo();
        }
        else if (args.CtrlKey && args.ToKeyCode() is KeyCode.KeyZ)
        {
            Undo();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _editorContent.FocusAsync();
        }
    }
}