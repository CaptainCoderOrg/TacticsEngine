<div class="board-overlay @OverlayEnabled" draggable="true"
     @onclick="CheckClick"
     @ondragend="CheckDragEnd"
     @ondragstart="CheckDragStart"></div>

<div class="board-overlay @DropEnabled"
     @ondragover:preventDefault="true"
     @ondragover="CheckDragOver"
     @ondrop:preventDefault="true"
     @ondrop="CheckDrop">
</div>

@if (_tool is not null)
{
    <DynamicComponent Type="@_tool.ComponentType" Parameters="@_tool.ComponentParameters" />
}

@code {
    [CascadingParameter, EditorRequired]
    public required BoardRenderer Parent { get; set; }
    private ITool? _tool = null;

    private string OverlayEnabled => _tool is null ? "enabled" : "disabled";
    private string DropEnabled => _tool is null ? "disabled" : "drag-enabled";

    private ITool? GetTool(MouseEventArgs args)
    {
        if (args.CtrlKey)
        {
            return new RemoveTilesTool(args.ToPosition(Parent.CellSize), Parent);
        }
        else
        {
            return new CreateTilesTool(args.ToPosition(Parent.CellSize), Parent);
        }
    }
    private void CheckClick(MouseEventArgs args)
    {
        ITool? tool = GetTool(args);
        tool?.OnClick(args.ToPosition(Parent.CellSize));
    }

    private async Task CheckDragStart(DragEventArgs args)
    {
        // We delay to let the JS event finish before changing state
        await Task.Delay(1);
        _tool = GetTool(args);
    }

    private void CheckDragEnd(DragEventArgs args)
    {
        _tool = null;
    }

    private void CheckDrop(DragEventArgs args) => _tool?.OnDrop(args.ToPosition(Parent.CellSize));

    private void CheckDragOver(DragEventArgs args) => _tool?.OnDragOver(args.ToPosition(Parent.CellSize));
}
