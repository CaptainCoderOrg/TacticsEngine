<div class="board-overlay tile-editor @OverlayEnabled" draggable="true"
     @onclick="CheckClick"
     @ondragend="CheckDragEnd"
     @ondragstart="CheckDragStart"></div>

<div class="board-overlay tile-editor-drop-zone @DropEnabled"
     @ondragover:preventDefault="true"
     @ondragover="CheckDragOver"
     @ondrop:preventDefault="true"
     @ondrop="CheckDrop">

    <div class="preview @PreviewEnabled @AddOrRemoveTiles" style="@PreviewStyle"></div>

</div>

@code {
    [CascadingParameter, EditorRequired]
    public required BoardRenderer Parent { get; set; }
    private bool _isErasing = false;
    private Position? _start = null;
    private BoundingBox? _preview = null;
    private string AddOrRemoveTiles => _isErasing ? "remove-tiles" : "add-tiles";
    private string OverlayEnabled => _start is null ? "enabled" : "disabled";
    private string DropEnabled => _start is null ? "disabled" : "drag-enabled";
    private string PreviewEnabled => _preview is null ? "disabled" : "enabled";
    private string? PreviewStyle => _preview is BoundingBox box ?
        $"--x: {box.TopLeft.X}; --y: {box.TopLeft.Y}; --width: {box.Width}; --height: {box.Height};" : null;

    private void CheckClick(MouseEventArgs args)
    {
        Position position = args.ToPosition(Parent.CellSize);
        if (args.CtrlKey)
        {
            Parent.Board.RemoveTile(position);
        }
        else
        {
            Parent.Board.CreateEmptyTile(position.X, position.Y);
        }
        Parent.Redraw();
    }

    private async Task CheckDragStart(DragEventArgs args)
    {
        // We delay to let the JS event finish before changing state
        await Task.Delay(1);
        _start = args.ToPosition(Parent.CellSize);
        _isErasing = args.CtrlKey;
    }

    private void CheckDragEnd(DragEventArgs args)
    {
        _start = null;
        _preview = null;
    }

    private void CheckDrop(DragEventArgs args)
    {
        if (_preview.HasValue)
        {
            if (!_isErasing)
            {
                Parent.Board.CreateEmptyTiles(_preview.Value.Positions());
            }
            else
            {
                Parent.Board.RemoveTiles(_preview.Value.Positions());
            }
            Parent.Redraw();
        }
    }

    private void CheckDragOver(DragEventArgs args)
    {
        if (_start.HasValue)
        {
            Position end = args.ToPosition(Parent.CellSize);
            _preview = _start.Value.CreateBoundingBox(end);
        }
    }
}
