<div class="board-overlay @OverlayEnabled" draggable="true"
     @onclick="CheckClick"
     @ondragend="CheckDragEnd"
     @ondragstart="CheckDragStart"></div>

<CascadingValue Value="this">
    <TileEditorBoardDropOverlay />

    @if (Tool is not null)
    {
        <DynamicComponent Type="@Tool.ComponentType" Parameters="@Tool.ComponentParameters" />
    }
    <ClipboardRenderer @ref="_clipboard" />
</CascadingValue>

@code {
    [CascadingParameter, EditorRequired]
    public required BoardRenderer Parent { get; set; }

    private ClipboardRenderer? _clipboard { get; set; }
    public ITool? Tool { get; private set; }

    private string OverlayEnabled => Tool is null ? "enabled" : "disabled";


    private ITool? GetTool(MouseEventArgs args)
    {
        if (args.ShiftKey && _clipboard is not null)
        {
            return new SelectTilesTool(args.ToPosition(Parent.CellSize), Parent, _clipboard);
        }
        _clipboard?.Clear();
        if (args.CtrlKey)
        {
            return new RemoveTilesTool(args.ToPosition(Parent.CellSize), Parent);
        }
        else
        {
            return new CreateTilesTool(args.ToPosition(Parent.CellSize), Parent);
        }
    }

    private void CheckClick(MouseEventArgs args)
    {
        ITool? tool = GetTool(args);
        tool?.OnClick(args.ToPosition(Parent.CellSize));
    }

    private async Task CheckDragStart(DragEventArgs args)
    {
        // We delay to let the JS event finish before changing state
        await Task.Delay(1);
        Tool = GetTool(args);
    }

    private void CheckDragEnd(DragEventArgs args) => ClearTool();

    public void Redraw() => StateHasChanged();

    public void SetTool(ITool tool)
    {
        Tool = tool;
        StateHasChanged();
    }

    public void ClearTool()
    {
        Tool = null;
        StateHasChanged();
    }
}
