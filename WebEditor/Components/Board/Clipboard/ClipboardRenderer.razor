@if (_boardData is not null)
{
    <div class="drag-area" draggable="true" style="@X @Y @Width @Height">

        @foreach (Position position in _boardData.Tiles)
        {

            bool top = !_boardData.Tiles.Contains(position + new Position(0, -1));
            bool bottom = !_boardData.Tiles.Contains(position + new Position(0, 1));
            bool left = !_boardData.Tiles.Contains(position + new Position(-1, 0));
            bool right = !_boardData.Tiles.Contains(position + new Position(1, 0));
            Position tranlated = position - _boardOffset + new Position(1, 1);
            <div class="selected-cell" left="@left" right="@right" top="@top" bottom="@bottom" style="grid-column: @(tranlated.X); grid-row: @(tranlated.Y);" />
        }
        <div class="board-data">
            <BoardRenderer Width="@_boundingBox.Width" Height="@_boundingBox.Height" Board="@_boardData" Zoom="@Parent.Zoom" ShowGrid="@false" Offset="@_boardOffset" />
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public required BoardRenderer Parent { get; set; }

    private string X => $"--x: {_boundingBox.TopLeft.X};";
    private string Y => $"--y: {_boundingBox.TopLeft.Y};";
    private string Width => $"--width: {_boundingBox.Width};";
    private string Height => $"--height: {_boundingBox.Height};";

    private BoundingBox _boundingBox = new();
    private Position _boardOffset = new();
    private BoardData? _boardData = null;

    public void Clear() => _boardData = null;

    public void AddSelection(BoundingBox toAdd)
    {
        if (_boardData is null) { InitializeSelection(toAdd); }
        else
        {
            Position offset = toAdd.TopLeft - _boundingBox.TopLeft + _boardOffset;
            BoardData selected = Parent.Board.GetSelection(toAdd);
            _boardData.AddAll(selected, offset);
            _boardOffset = new Position()
                {
                    X = Math.Min(_boardOffset.X, offset.X),
                    Y = Math.Min(_boardOffset.Y, offset.Y),
                };
            _boundingBox = _boundingBox.Fit(toAdd);
        }

        StateHasChanged();
    }

    private void InitializeSelection(BoundingBox toAdd)
    {
        _boardOffset = new Position(0, 0);
        _boardData = Parent.Board.GetSelection(toAdd);
        _boundingBox = toAdd;
    }
}
