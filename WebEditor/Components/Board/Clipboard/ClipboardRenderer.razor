@if (_boardData is not null)
{
    <div class="drag-area" draggable="true" style="@X @Y @Width @Height">
        
        @foreach (Position position in _boardData.Tiles)
        {
            
            bool top = !_boardData.Tiles.Contains(position + new Position(0, -1));
            bool bottom = !_boardData.Tiles.Contains(position + new Position(0, 1));
            bool left = !_boardData.Tiles.Contains(position + new Position(-1, 0));
            bool right = !_boardData.Tiles.Contains(position + new Position(1, 0));
            <div class="selected-cell" left="@left" right="@right" top="@top" bottom="@bottom" style="grid-column: @(position.X + 1); grid-row: @(position.Y + 1);" />
        }
        <div class="board-data">
            <BoardRenderer Width="@_width" Height="@_height" Board="@_boardData" Zoom="@Parent.Zoom" ShowGrid="@false" />
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public required BoardRenderer Parent { get; set; }

    private string X => $"--x: {_topLeft.X};";
    private string Y => $"--y: {_topLeft.Y};";
    private string Width => $"--width: {_width};";
    private string Height => $"--height: {_height};";

    private Position _topLeft = new();
    private int _width = 0;
    private int _height = 0;
    private BoardData? _boardData = null;

    public void Clear() => _boardData = null;

    public void AddSelection(BoundingBox toAdd)
    {
        _boardData = Parent.Board.GetSelection(toAdd);
        _topLeft = toAdd.TopLeft;
        _width = toAdd.Width;
        _height = toAdd.Height;
        StateHasChanged();
    }
}
