@using System.Text.Json
@using Blazor.DownloadFileFast.Interfaces
@using CaptainCoder.TacticsEngine.Board
@using System.Diagnostics.CodeAnalysis
@using System.Text
@inject IJSRuntime JSRuntime;
@inject IBlazorDownloadFileService BlazorDownloadFileService;
<div class="editor-content">
    <div class="editor-menu">
        <h1>Board Editor</h1>
        <button @onclick="@(() => LoadBoard())">Load File</button>
        <InputFile @ref="@_inputFile" OnChange="@OnFileSelected" hidden />
        <button @onclick="@(() => SaveBoard())">Save File</button>
        <button @onclick="@(() => AddFigure())">Add Figure</button>
    </div>
    <div class="editor-content">
        <BoardEditorView @ref="@_boardEditorView" />
    </div>
</div>

@code
{

    [AllowNull]
    private BoardEditorView _boardEditorView;
    [AllowNull]
    private InputFile _inputFile;
    public async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        const int MaxSize = 100 * 1024 * 1024; // 100 MB
        // TODO: This reads the entire string then parses it. probably a better way?
        string? reader = 
            await new StreamReader(e.File.OpenReadStream(MaxSize)).ReadToEndAsync();
        if (!BoardExtensions.TryFromJson(reader, out Board? result))
        {
            // TODO: Error handling
            Console.WriteLine("Error");
            return;
        }
        await _boardEditorView.LoadBoard(result);
    }

    private async Task LoadBoard()
    {
        await JSRuntime.InvokeVoidAsync("HTMLElement.prototype.click.call", _inputFile.Element);
    }

    private async Task SaveBoard()
    {
        var bytes = Encoding.UTF8.GetBytes(_boardEditorView.Board.ToJson());
        await BlazorDownloadFileService.DownloadFileAsync("Board.json", bytes, "application/json");
    }

    private void AddFigure()
    {
        _boardEditorView.AddFigure(3, 3, new Figure() { Width = 1, Height = 2} );
    }
}