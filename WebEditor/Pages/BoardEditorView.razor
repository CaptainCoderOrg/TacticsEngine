@using CaptainCoder.TacticsEngine.Board
<div class="board-container" 
    style="--cell-size: @(CellSize)px;
           --board-width: @Width;
           --board-height: @Height;"
    @onclick="ClickBoardContainer">
    @foreach ((Position position, TileInfo info) in Board.Tiles)
    {
        <TileRenderer @key="@position" Position="@position" Tile="@(info as Tile)" OnClick="@SelectTile"/>
    }
</div>

@code
{
    public int CellSize { get; set; } = 50;
    public int Width { get; set; } = 10;
    public int Height { get; set; } = 10;
    public Board Board { get; private set; } = new();

    public async Task LoadBoard(Board board)
    {
        Board = board;
        StateHasChanged();
        await Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        BoundingBox box = new (new Position(2, 2), 3, 3);
        Board.CreateEmptyTiles(box.Positions());
        @* Board.AddFigure(3, 3, new Figure(){ Width = 1, Height = 2 }); *@
        Board.CreateEmptyTile(1, 1);
    }

    private void SelectTile(Position selected)
    {
        Board.RemoveTile(selected.X, selected.Y);
    }
    private void ClickBoardContainer(MouseEventArgs e)
    {
        int x = (int)(e.OffsetX / CellSize);
        int y = (int)(e.OffsetY / CellSize);
        if(Board.HasTile(x, y)) { return; }
        Board.CreateEmptyTile(x, y);
    }

    public void AddFigure(int x, int y, Figure toAdd)
    {
        Board.AddFigure(x, y, toAdd);
        StateHasChanged();
    }
}